{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _BackgroundDef = require('./BackgroundDef');\n\nvar _BackgroundDef2 = _interopRequireDefault(_BackgroundDef);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar hexRatio = 0.868217054;\nvar numSides = 6;\nvar centerAng = 2 * Math.PI / numSides;\nvar bgIndex = 0;\n\nfunction round(num) {\n  return Number(num.toFixed(3));\n}\n\nfunction toRadians(degs) {\n  return Math.PI * degs / 180;\n}\n\nfunction getPoints(props, offset) {\n  var cy = props.diagonal / 2;\n  var cx = props.diagonal * hexRatio / 2;\n  var startAng = toRadians(90);\n  var radius = cy;\n  var vertex = [];\n\n  for (var i = 0; i < numSides; i++) {\n    var ang = startAng + i * centerAng;\n    vertex.push([offset / 2 + cx + radius * Math.cos(ang), // X\n    offset / 1.5 + cy - radius * Math.sin(ang) // Y\n    ]);\n  }\n\n  return vertex.map(function (point) {\n    return point.map(round);\n  });\n}\n\nfunction getFlatTopPoints(props, offset) {\n  var y = props.diagonal / 2;\n  var cx = hexRatio * props.diagonal / 2;\n  var x = cx + (y - cx);\n  var radius = y;\n  var cos = 0.866 * radius;\n  var sin = 0.5 * radius;\n  return [[x - sin, y - cos], [x + sin, y - cos], [x + radius, y], [x + sin, y + cos], [x - sin, y + cos], [x - radius, y]].map(function (point) {\n    return point.map(round);\n  });\n}\n\nfunction defaults(defs, usr) {\n  var target = {};\n\n  for (var key in usr) {\n    if (usr.hasOwnProperty(key)) {\n      target[key] = usr[key];\n    }\n  }\n\n  for (var _key in defs) {\n    if (typeof target[_key] === 'undefined' && defs.hasOwnProperty(_key)) {\n      target[_key] = defs[_key];\n    }\n  }\n\n  return target;\n}\n\nfunction substractMinBounds(extremes) {\n  return {\n    maxX: extremes.maxX - extremes.minX,\n    maxY: extremes.maxY - extremes.minY,\n    minX: extremes.minX,\n    minY: extremes.minY\n  };\n}\n\nfunction getBackgroundId() {\n  return 'bg-' + ++bgIndex;\n}\n\nfunction Hexagon(props) {\n  var bgId = props.backgroundImage && getBackgroundId();\n  var polyStyle = defaults({\n    fill: props.backgroundImage ? 'url(#' + bgId + ')' : 'none',\n    stroke: '#42873f',\n    strokeWidth: props.diagonal * 0.02,\n    cursor: props.onClick && 'pointer'\n  }, props.style);\n  var baseBounds = {\n    maxX: -Infinity,\n    maxY: -Infinity,\n    minX: +Infinity,\n    minY: +Infinity\n  };\n  var offset = polyStyle.strokeWidth;\n  var halfStroke = Math.ceil(offset / 2);\n  var points = props.flatTop ? getFlatTopPoints(props, offset) : getPoints(props, offset);\n  var bounds = substractMinBounds(points.reduce(reduceBounds, baseBounds));\n  var viewBox = [bounds.minX, bounds.minY, bounds.maxX + (bounds.minX < 0 ? Math.abs(bounds.minX) : 0), bounds.maxY + (bounds.minY < 0 ? Math.abs(bounds.minY) : 0)].join(' ');\n\n  var polygon = _react2.default.createElement('polygon', _extends({}, props.hexProps, {\n    onClick: props.onClick,\n    style: polyStyle,\n    points: points.map(function (point) {\n      return point.join(',');\n    }).join(' ')\n  }));\n\n  var anchor = props.href && _react2.default.createElement('a', {\n    xlinkHref: props.href,\n    target: props.target\n  }, polygon);\n\n  return _react2.default.createElement('svg', {\n    xmlns: 'http://www.w3.org/2000/svg',\n    version: '1.1',\n    className: props.className,\n    viewBox: viewBox\n  }, props.backgroundImage && _react2.default.createElement(_BackgroundDef2.default, _extends({\n    id: bgId\n  }, props)), anchor || polygon, props.children);\n\n  function reduceBounds(extremes, point) {\n    return {\n      maxX: Math.ceil(Math.max(extremes.maxX, point[0] + halfStroke)),\n      maxY: Math.ceil(Math.max(extremes.maxY, point[1] + halfStroke)),\n      minX: Math.floor(Math.min(extremes.minX, point[0] - halfStroke)),\n      minY: Math.floor(Math.min(extremes.minY, point[1] - halfStroke))\n    };\n  }\n}\n\nHexagon.propTypes = {\n  diagonal: _propTypes.number,\n  className: _propTypes.string,\n  onClick: _propTypes.func,\n  href: _propTypes.string,\n  target: _propTypes.string,\n  flatTop: _propTypes.bool,\n  backgroundImage: _propTypes.string,\n  backgroundWidth: _propTypes.number,\n  backgroundHeight: _propTypes.number,\n  backgroundScale: _propTypes.number,\n  backgroundSize: _propTypes.number,\n  hexProps: _propTypes.object,\n  style: _propTypes.object,\n  children: _propTypes.node\n};\nHexagon.defaultProps = {\n  diagonal: 500,\n  flatTop: false,\n  style: {}\n};\nexports.default = Hexagon;","map":null,"metadata":{},"sourceType":"script"}