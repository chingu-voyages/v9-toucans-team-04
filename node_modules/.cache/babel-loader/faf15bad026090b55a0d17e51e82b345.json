{"ast":null,"code":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['exports', './models/Hex', './models/Point'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports, require('./models/Hex'), require('./models/Point'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global.Hex, global.Point);\n    global.HexUtils = mod.exports;\n  }\n})(this, function (exports, _Hex, _Point) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  var _Hex2 = _interopRequireDefault(_Hex);\n\n  var _Point2 = _interopRequireDefault(_Point);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var HexUtils = function () {\n    function HexUtils() {\n      _classCallCheck(this, HexUtils);\n    }\n\n    _createClass(HexUtils, null, [{\n      key: 'equals',\n      value: function equals(a, b) {\n        return a.q == b.q && a.r == b.r && a.s == b.s;\n      }\n    }, {\n      key: 'add',\n      value: function add(a, b) {\n        return new _Hex2.default(a.q + b.q, a.r + b.r, a.s + b.s);\n      }\n    }, {\n      key: 'subtract',\n      value: function subtract(a, b) {\n        return new _Hex2.default(a.q - b.q, a.r - b.r, a.s - b.s);\n      }\n    }, {\n      key: 'multiply',\n      value: function multiply(a, k) {\n        return new _Hex2.default(a.q * k, a.r * k, a.s * k);\n      }\n    }, {\n      key: 'lengths',\n      value: function lengths(hex) {\n        return parseInt((Math.abs(hex.q) + Math.abs(hex.r) + Math.abs(hex.s)) / 2);\n      }\n    }, {\n      key: 'distance',\n      value: function distance(a, b) {\n        return HexUtils.lengths(HexUtils.subtract(a, b));\n      }\n    }, {\n      key: 'direction',\n      value: function direction(_direction) {\n        return HexUtils.DIRECTIONS[(6 + _direction % 6) % 6];\n      }\n    }, {\n      key: 'neighbour',\n      value: function neighbour(hex, direction) {\n        return HexUtils.add(hex, HexUtils.direction(direction));\n      }\n    }, {\n      key: 'neighbours',\n      value: function neighbours(hex) {\n        var array = [];\n\n        for (var i = 0; i < HexUtils.DIRECTIONS.length; i += 1) {\n          array.push(HexUtils.neighbour(hex, i));\n        }\n\n        return array;\n      }\n    }, {\n      key: 'round',\n      value: function round(hex) {\n        var rq = Math.round(hex.q);\n        var rr = Math.round(hex.r);\n        var rs = Math.round(hex.s);\n        var qDiff = Math.abs(rq - hex.q);\n        var rDiff = Math.abs(rr - hex.r);\n        var sDiff = Math.abs(rs - hex.s);\n        if (qDiff > rDiff && qDiff > sDiff) rq = -rr - rs;else if (rDiff > sDiff) rr = -rq - rs;else rs = -rq - rr;\n        return new _Hex2.default(rq, rr, rs);\n      }\n    }, {\n      key: 'hexToPixel',\n      value: function hexToPixel(hex, layout) {\n        var s = layout.spacing;\n        var M = layout.orientation;\n        var x = (M.f0 * hex.q + M.f1 * hex.r) * layout.size.x;\n        var y = (M.f2 * hex.q + M.f3 * hex.r) * layout.size.y; // Apply spacing\n\n        x = x * s;\n        y = y * s;\n        return new _Point2.default(x + layout.origin.x, y + layout.origin.y);\n      }\n    }, {\n      key: 'pixelToHex',\n      value: function pixelToHex(point, layout) {\n        var M = layout.orientation;\n        var pt = new _Point2.default((point.x - layout.origin.x) / layout.size.x, (point.y - layout.origin.y) / layout.size.y);\n        var q = M.b0 * pt.x + M.b1 * pt.y;\n        var r = M.b2 * pt.x + M.b3 * pt.y;\n        var hex = new _Hex2.default(q, r, -q - r);\n        return HexUtils.round(hex);\n      }\n    }, {\n      key: 'lerp',\n      value: function lerp(a, b, t) {\n        return a + (b - a) * t;\n      }\n    }, {\n      key: 'hexLerp',\n      value: function hexLerp(a, b, t) {\n        return new _Hex2.default(HexUtils.lerp(a.q, b.q, t), HexUtils.lerp(a.r, b.r, t), HexUtils.lerp(a.s, b.s, t));\n      }\n    }, {\n      key: 'getID',\n      value: function getID(hex) {\n        return hex.q + ',' + hex.r + ',' + hex.s;\n      }\n    }]);\n\n    return HexUtils;\n  }();\n\n  HexUtils.DIRECTIONS = [new _Hex2.default(1, 0, -1), new _Hex2.default(1, -1, 0), new _Hex2.default(0, -1, 1), new _Hex2.default(-1, 0, 1), new _Hex2.default(-1, 1, 0), new _Hex2.default(0, 1, -1)];\n  exports.default = HexUtils;\n});","map":null,"metadata":{},"sourceType":"script"}