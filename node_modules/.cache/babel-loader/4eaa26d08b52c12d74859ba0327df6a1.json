{"ast":null,"code":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['exports', './models/Hex', './HexUtils'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports, require('./models/Hex'), require('./HexUtils'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global.Hex, global.HexUtils);\n    global.GridGenerator = mod.exports;\n  }\n})(this, function (exports, _Hex, _HexUtils) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  var _Hex2 = _interopRequireDefault(_Hex);\n\n  var _HexUtils2 = _interopRequireDefault(_HexUtils);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var GridGenerator = function () {\n    function GridGenerator() {\n      _classCallCheck(this, GridGenerator);\n    }\n\n    _createClass(GridGenerator, null, [{\n      key: 'getGenerator',\n      value: function getGenerator(name) {\n        if (GridGenerator.hasOwnProperty(name)) return GridGenerator[name];\n        return null;\n      }\n    }, {\n      key: 'ring',\n      value: function ring(center, mapRadius) {\n        var hexas = [];\n\n        var hex = _HexUtils2.default.add(center, _HexUtils2.default.multiply(_HexUtils2.default.direction(4), mapRadius));\n\n        for (var i = 0; i < 6; i++) {\n          for (var j = 0; j < mapRadius; j++) {\n            hexas.push(hex);\n            hex = _HexUtils2.default.neighbour(hex, i);\n          }\n        }\n\n        return hexas;\n      }\n    }, {\n      key: 'spiral',\n      value: function spiral(center, mapRadius) {\n        var results = [center];\n\n        for (var k = 1; k <= mapRadius; k++) {\n          var temp = this.ring(center, k);\n          results = results.concat(temp);\n        }\n\n        return results;\n      }\n    }, {\n      key: 'parallelogram',\n      value: function parallelogram(q1, q2, r1, r2) {\n        var hexas = [];\n\n        for (var q = q1; q <= q2; q++) {\n          for (var r = r1; r <= r2; r++) {\n            hexas.push(new _Hex2.default(q, r, -q - r));\n          }\n        }\n\n        return hexas;\n      }\n    }, {\n      key: 'triangle',\n      value: function triangle(mapSize) {\n        var hexas = [];\n\n        for (var q = 0; q <= mapSize; q++) {\n          for (var r = 0; r <= mapSize - q; r++) {\n            hexas.push(new _Hex2.default(q, r, -q - r));\n          }\n        }\n\n        return hexas;\n      }\n    }, {\n      key: 'hexagon',\n      value: function hexagon(mapRadius) {\n        var hexas = [];\n\n        for (var q = -mapRadius; q <= mapRadius; q++) {\n          var r1 = Math.max(-mapRadius, -q - mapRadius);\n          var r2 = Math.min(mapRadius, -q + mapRadius);\n\n          for (var r = r1; r <= r2; r++) {\n            hexas.push(new _Hex2.default(q, r, -q - r));\n          }\n        }\n\n        return hexas;\n      }\n    }, {\n      key: 'rectangle',\n      value: function rectangle(mapWidth, mapHeight) {\n        var hexas = [];\n\n        for (var r = 0; r < mapHeight; r++) {\n          var offset = Math.floor(r / 2); // or r>>1\n\n          for (var q = -offset; q < mapWidth - offset; q++) {\n            hexas.push(new _Hex2.default(q, r, -q - r));\n          }\n        }\n\n        return hexas;\n      }\n    }, {\n      key: 'orientedRectangle',\n      value: function orientedRectangle(mapWidth, mapHeight) {\n        var hexas = [];\n\n        for (var q = 0; q < mapWidth; q++) {\n          var offset = Math.floor(q / 2); // or q>>1\n\n          for (var r = -offset; r < mapHeight - offset; r++) {\n            hexas.push(new _Hex2.default(q, r, -q - r));\n          }\n        }\n\n        return hexas;\n      }\n    }]);\n\n    return GridGenerator;\n  }();\n\n  exports.default = GridGenerator;\n});","map":null,"metadata":{},"sourceType":"script"}